var documenterSearchIndex = {"docs":
[{"location":"#SMDGraphs.jl-API","page":"Home","title":"SMDGraphs.jl API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [SMDGraphs]\nOrder = [:type, :function]","category":"page"},{"location":"#SMDGraphs.AbstractGraphNode","page":"Home","title":"SMDGraphs.AbstractGraphNode","text":"AbstractGraphNode\n\nAbstract type for all graph nodes types.\n\n\n\n\n\n","category":"type"},{"location":"#SMDGraphs.MappedNodeGraph","page":"Home","title":"SMDGraphs.MappedNodeGraph","text":"MappedNodeGraph{N, G}\n\nCreate a graph with mapped nodes. \n\nFields\n\ngraph – Graph\nmid – Mapped id to nodes dictionary\nnodes – Mapped nodes \nedges – List of the edges between the nodes \npaths – List of the available paths in the graph\n\nConstructors\n\nMappedNodeGraph{N}(g::G) where {G <: AbstractGraph, N <: AbstractGraphNode}\n\n\n\n\n\n","category":"type"},{"location":"#Graphs.SimpleGraphs.add_edge!-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64, Int64}} where T","page":"Home","title":"Graphs.SimpleGraphs.add_edge!","text":"add_edge!(g::MappedNodeGraph, from::Int, to::Int, [cost])\n\nAdd an edge between from and to to g.  Optionally assign a cost to the edge.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.SimpleGraphs.add_vertex!-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, T}} where T<:SMDGraphs.AbstractGraphNode","page":"Home","title":"Graphs.SimpleGraphs.add_vertex!","text":"add_vertex!(g, node)\n\nAdd node to the graph g.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.has_path-Tuple{SMDGraphs.MappedNodeGraph, Int64, Int64}","page":"Home","title":"Graphs.has_path","text":"has_path(g, from, to)\n\nReturn true if there is a path between from and to in the graph g.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.has_vertex-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"Home","title":"Graphs.has_vertex","text":"has_vertex(g, node)\n\nReturn true if node is contained in the graph g.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.MappedDiGraph-Union{Tuple{Type{N}}, Tuple{N}} where N","page":"Home","title":"SMDGraphs.MappedDiGraph","text":"MappedDiGraph(::Type{N}) where {N}\n\nConstruct a directed MappedNodeGraph from node type N.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.MappedGraph-Union{Tuple{Type{N}}, Tuple{N}} where N","page":"Home","title":"SMDGraphs.MappedGraph","text":"MappedGraph(::Type{N}) where {N}\n\nConstruct a MappedNodeGraph from node type N.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.add_edge_cost!-Union{Tuple{N}, Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T, N}, Int64, Int64, Int64}} where {T, N<:Graphs.SimpleGraphs.SimpleGraph}","page":"Home","title":"SMDGraphs.add_edge_cost!","text":"add_edge_cost!(g::MappedNodeGraph, fid::Int, tid::Int, cost::Int)\n\nFor a SimpleGraph type, register the edge cost between the nodes with mapped IDs  fid and tid in both directions.  \n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.add_edge_cost!-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64, Int64}} where T","page":"Home","title":"SMDGraphs.add_edge_cost!","text":"add_edge_cost!(g::MappedNodeGraph, fid::Int, tid::Int, cost::Int)\n\nRegister the cost between of the edge from the node with mapped ID fid to the  node with mapped ID tid. \n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.compute_paths!-Union{Tuple{SMDGraphs.MappedNodeGraph{T}}, Tuple{T}} where T","page":"Home","title":"SMDGraphs.compute_paths!","text":"compute_paths(g::MappedNodeGraph)\n\nCompute all possible paths in the graph.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.get_edgecosts-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64}} where T","page":"Home","title":"SMDGraphs.get_edgecosts","text":"get_edgecosts(g::MappedNodeGraph, from::Int, to::Int)\n\nGet all costs assigned to the edges between from and to. Returns an empty array if  either from or to are not a part of g or if there is no path between them.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.get_mappedid-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"Home","title":"SMDGraphs.get_mappedid","text":"get_mappedid(g::MappedNodeGraph, node::Int)\n\nGet the mappedid associated with a node.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.get_mappednode-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"Home","title":"SMDGraphs.get_mappednode","text":"get_mappednode(g::MappedNodeGraph, mid::Int)\n\nGet the node associated to the given mapped id.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.get_node-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"Home","title":"SMDGraphs.get_node","text":"get_node(g::MappedNodeGraph, node::Int)\n\nGet the node associated with a node index.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.get_node_id-Tuple{T} where T<:SMDGraphs.AbstractGraphNode","page":"Home","title":"SMDGraphs.get_node_id","text":"get_node_id(b::AbstractGraphNode)\n\nGet the mapped-id of an AbstractGraphNode.\n\nwarning: Warning\nThis method is abstract! A concrete implementation for each concrete node shall be defined.\n\n\n\n\n\n","category":"method"},{"location":"#SMDGraphs.get_path-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64}} where T","page":"Home","title":"SMDGraphs.get_path","text":"get_path(g::MappedNodeGraph, from::Int, to::Int)\n\nGet the nodes on the path between and including from and to. Returns an empty array if  either from or to are not a part of g or if there is no path between them. \n\n\n\n\n\n","category":"method"}]
}
