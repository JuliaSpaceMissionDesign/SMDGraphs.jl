var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SMDGraphs]\nOrder = [:type, :function]","category":"page"},{"location":"api/#SMDGraphs.MappedNodeGraph","page":"API","title":"SMDGraphs.MappedNodeGraph","text":"MappedNodeGraph{N, G} <: AbstractJSMDGraph{Int}\n\nCreate a graph with mapped nodes. \n\nFields\n\ngraph – Graph\nmid – Mapped id to nodes dictionary\nnodes – Mapped nodes \nedges – List of the edges between the nodes \npaths – List of the available paths in the graph\n\nConstructors\n\nMappedNodeGraph{N}(g::G) where {G <: AbstractGraph, N <: AbstractGraphNode}\n\n\n\n\n\n","category":"type"},{"location":"api/#SMDGraphs.MappedDiGraph-Union{Tuple{Type{N}}, Tuple{N}} where N","page":"API","title":"SMDGraphs.MappedDiGraph","text":"MappedDiGraph(::Type{N}) where {N}\n\nConstruct a directed MappedNodeGraph from node type N.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.MappedGraph-Union{Tuple{Type{N}}, Tuple{N}} where N","page":"API","title":"SMDGraphs.MappedGraph","text":"MappedGraph(::Type{N}) where {N}\n\nConstruct a MappedNodeGraph from node type N.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.add_edge_cost!-Union{Tuple{N}, Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T, N}, Int64, Int64, Int64}} where {T, N<:Graphs.SimpleGraphs.SimpleGraph}","page":"API","title":"SMDGraphs.add_edge_cost!","text":"add_edge_cost!(g::MappedNodeGraph{T, <:SimpleGraph}, fid::Int, tid::Int, cost::Int)\n\nFor a SimpleGraph type, register the edge cost between the nodes with mapped IDs  fid and tid in both directions.  \n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.add_edge_cost!-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64, Int64}} where T","page":"API","title":"SMDGraphs.add_edge_cost!","text":"add_edge_cost!(g::MappedNodeGraph, fid::Int, tid::Int, cost::Int)\n\nRegister the cost between of the edge from the node with mapped ID fid to the  node with mapped ID tid. \n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.compute_paths!-Union{Tuple{SMDGraphs.MappedNodeGraph{T}}, Tuple{T}} where T","page":"API","title":"SMDGraphs.compute_paths!","text":"compute_paths(g::MappedNodeGraph)\n\nCompute all possible paths in the graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.get_edgecosts-Union{Tuple{T}, Tuple{SMDGraphs.MappedNodeGraph{T}, Int64, Int64}} where T","page":"API","title":"SMDGraphs.get_edgecosts","text":"get_edgecosts(g::MappedNodeGraph, from::Int, to::Int)\n\nGet all costs assigned to the edges between from and to. Returns an empty array if  either from or to are not a part of g or if there is no path between them.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.get_mappedid-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"API","title":"SMDGraphs.get_mappedid","text":"get_mappedid(g::MappedNodeGraph, node::Int)\n\nGet the mappedid associated with a node. The mappedid is the internal ID that is assigned  to the node within the graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.get_mappednode-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"API","title":"SMDGraphs.get_mappednode","text":"get_mappednode(g::MappedNodeGraph, mid::Int)\n\nGet the node associated to the given mapped id.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.get_node-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"API","title":"SMDGraphs.get_node","text":"get_node(g::MappedNodeGraph, node::Int)\n\nGet the node associated with a node index.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.get_node_id-Tuple{JSMDInterfaces.Graph.AbstractJSMDGraphNode}","page":"API","title":"SMDGraphs.get_node_id","text":"get_node_id(b::AbstractJSMDGraphNode)\n\nGet the mapped-id of an AbstractJSMDGraphNode.\n\nwarning: Warning\nThis method is abstract! A concrete implementation for each concrete node shall be defined.\n\n\n\n\n\n","category":"method"},{"location":"api/#SMDGraphs.get_outerid-Tuple{SMDGraphs.MappedNodeGraph, Int64}","page":"API","title":"SMDGraphs.get_outerid","text":"get_outerid(g::MappedNodeGraph, id::Int)\n\nReturn the id of the node associated to the mapped id id. The outer ID is the ID that is  assigned to the node by the user.\n\n\n\n\n\n","category":"method"},{"location":"mappedgraph/#Mapped-Node-Graphs","page":"Mapped Graphs","title":"Mapped-Node Graphs","text":"","category":"section"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"CurrentModule = SMDGraphs\nDocTestSetup = quote \n    using SMDGraphs\n    import JSMDInterfaces.Graph: AbstractJSMDGraphNode\nend","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Mapped-Node graphs enable graph operations on any custom user-defined  concrete type, effectively replacing the integer nodes of the Graphs.jl graph, with the desired type. To enforce type-stability and avoid allocations,  the linking between the inner graph nodes and the custom nodes is achieved via  an integer mapping. Therefore, the only requirement is that an integer ID can  be associated to the custom type. The user will then be able to retrieve the  items in the nodes through this ID.","category":"page"},{"location":"mappedgraph/#Usage","page":"Mapped Graphs","title":"Usage","text":"","category":"section"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Suppose that you want to create a graph to connect items that store planetary bodies  properties. First, we will define our custom node type, which must be  a sub-type of AbstractJSMDGraphNode:","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"import JSMDInterfaces.Graph: AbstractJSMDGraphNode \n\nstruct SpaceBody{T} <: AbstractGraphNode\n    radius::T\n    density::T\n    id::Int \n    name::String\nend","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Before using this structure as node, the function SMDGraphs.get_node_id must be implemented for this data-type. For this reason, we have included within SpaceBody an integer field to store the ID of the body.","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"SMDGraphs.get_node_id(body::SpaceBody) = body.id","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"We are now ready to create our custom graph. The MappedNodeGraph constructor is called as follows:","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"import SMDGraphs: MappedGraph\ngraph = MappedGraph(SpaceBody{Float64})","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"This line will create an empty SimpleGraph with nodes of type SpaceBody{Float64}. A directed SimpleDiGraph graph is also supported by replacing the above line  with the MappedDiGraph constructor. To avoid allocations, all the nodes must belong  to the same concrete type.","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"To show the capabilities of mapped graphs, we will define a bunch of custom bodies and add them to the graph. ","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"# Define some custom bodies \nearth = SpaceBody(6378.0, 5.51, 399, \"Earth\")\nsun = SpaceBody(696340.0, 1.41, 10, \"Sun\")\nmoon = SpaceBody(1737.4, 3.34, 301, \"Moon\")\n\n# Populate the graph with these bodies\nSMDGraphs.add_vertex!(graph, earth)\nSMDGraphs.add_vertex!(graph, sun)\nSMDGraphs.add_vertex!(graph, moon)","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Please note that the order in which these bodies are added to the graph does not matter,  because it will only affect the inner ID associated to each node. To access the items  stored inside the graph, we can use either their user-defined ID or the internal one. The latter is retrieved with the SMDGraphs.get_mappedid function:","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"julia> SMDGraphs.get_node(graph, 399)\nSpaceBody{Float64}(6378.0, 5.51, 399, \"Earth\")\n\njulia> SMDGraphs.get_mappedid(graph, 301)\n3\n\njulia> SMDGraphs.get_mappednode(graph, 3)\nSpaceBody{Float64}(1737.4, 3.34, 301, \"Moon\")","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Here we have retrieved Earth's property through its nominal ID and exploited  get_mappedid and get_mappednode to discover the internal ID of the Moon and access its content.","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Connections between the items in the graph are easily added as follows: ","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"SMDGraphs.add_edge!(graph, 10, 399)\nSMDGraphs.add_edge!(graph, 399, 301)","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"By providing an additional integer input to add_edge!, a weight factor  can be associated to the edge. The default weight is null.","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Finally, the path between two nodes is retrived as: ","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"julia> path = SMDGraphs.get_path(graph, 10, 301);\njulia> print(path)\n[2, 1, 3]","category":"page"},{"location":"mappedgraph/","page":"Mapped Graphs","title":"Mapped Graphs","text":"Note that get_path returns an integer vector of internal IDs instead of the user-defined ones. This enables a faster retrieval of the nodes via SMDGraphs.get_mappednode, allowing to skip the dictionary lookup for the ID mapping of each node in the path.","category":"page"},{"location":"#SMDGraphs","page":"Home","title":"SMDGraphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A simple, light, and flexible API for graph-like data structure handling.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The purpose of SMDGraphs.jl is to enable efficient support for graph operations and analysis  on custom user-defined datatypes. It achieves so by offering a set of light-weight wrappers  around Graphs.jl. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can be installed using Julia's package manager: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; \njulia> Pkg.add(\"SMDGraphs.jl\")","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package currently supports the following graph-like structures:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mapped-Node Graphs ","category":"page"},{"location":"#Supporting","page":"Home","title":"Supporting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was developed as part of the JSMD ecosystem.  If you found this package useful in your applications, please consider starring the repository.","category":"page"}]
}
